import yargs from "yargs";
import { visitByVpc } from "../../visitor";
import { readFileSync } from "fs";
import { safeLoad } from "js-yaml";
import { TagCollectorVisitor } from "./TagCollectorVisitor";
import { plan } from "./plan";

export type TagSpecification = {
  tags: {
    key: string;
    value?: string;
  }[];
};

type TagVpcConfig = {
  command: "current" | "plan" | "apply";
  vpcId: string;
  region: string;
  tagSpec: TagSpecification;
};

export const command = "tag-vpc <command>";

export const describe = "tags selected vpc and all associated components";

export const builder = () =>
  yargs
    .positional("command", {
      describe: "the command you wish to execute",
      choices: ["current", "plan", "apply"]
    })
    .options({
      "vpc-id": {
        describe: "vpc id to start the crawl with",
        type: "string",
        demandOption: true
      },
      "tag-spec": {
        describe:
          "path to a valid tag specification file ( used to produce a tag plan )",
        type: "string"
      },
      "tag-plan": {
        describe:
          "path to a valid tag plan file ( typically generated by the 'plan' command )",
        type: "string"
      },
      region: {
        describe: "aws region",
        type: "string",
        default: "eu-west-1"
      }
    })
    .check(config => {
      [
        { commands: ["plan"], optionName: "tag-spec" },
        { commands: ["apply"], optionName: "tag-plan" }
      ].forEach(({ commands, optionName }) => {
        if (commands.includes(config.command!) && !config[optionName]) {
          throw new Error(
            `'${config.command}' requires --${optionName} be supplied`
          );
        }
      });
      return true;
    })
    .coerce({
      tagSpec: (value: string) => {
        if (/ya?ml$/im.test(`${value}`.trim())) {
          return safeLoad(readFileSync(value, "utf-8"));
        }
        throw new Error(`expected path to yaml tag-spec file [${value}]`);
      },
      tagPlan: (value: string) => {
        if (/\.json$/im.test(`${value}`.trim())) {
          return JSON.parse(readFileSync(value, "utf-8"));
        }
        throw new Error(`expected path to json tag plan file [${value}]`);
      }
    });

export const handler = async (argv: TagVpcConfig) => {
  console.log(JSON.stringify(argv, null, 2));
  const visitor = new TagCollectorVisitor(argv.region);
  const result = await visitByVpc(argv.vpcId, visitor);

  switch (argv.command) {
    case "current":
      dump(result);
      break;

    case "plan":
      dump(plan(argv.tagSpec, visitor.result));
      break;

    case "apply":
      throw new Error("command not implemented");
      break;
  }
};

const dump = (value: object, label?: string) =>
  console.log(label || "", JSON.stringify(value, null, 2));
